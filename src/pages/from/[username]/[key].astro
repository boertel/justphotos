---
import Layout from "@layouts/Layout.astro";
import Sidebar from "@components/Sidebar.astro";
import Logo from "@components/Logo.astro";
import Photo from "@components/Photo.astro";
import CameraIcon from "phosphor-astro/Camera.astro";
import ApertureIcon from "phosphor-astro/Aperture.astro";
import MetricsIcon from "phosphor-astro/Spinner.astro";
import DateIcon from "phosphor-astro/CalendarBlank.astro";
import LocationIcon from "phosphor-astro/MapPin.astro";
import { cacheHeader } from "pretty-cache-header";

const key = `${Astro.params.username}/original/${Astro.params.key}`;
const object = await Astro.locals.runtime.env.R2.get(key);
if (!object) {
  return Astro.redirect("/404");
}
const photo = object.customMetadata;
const { username } = Astro.params;

const now = new Date().toLocaleString();

Astro.response.headers.set(
  "Cache-Control",
  cacheHeader({
    public: true,
    maxAge: "1hour",
    sMaxage: "1week",
    staleWhileRevalidate: "2min",
  }),
);
---

<Layout
  title="Benjamin Oertel"
  class="grid min-h-screen grid-cols-[min-content_1fr] grid-rows-[1fr_min-content_min-content] [grid-template-areas:'content_content''sidebar_sidebar''logo_footer'] md:grid-cols-[300px_auto] md:grid-rows-[min-content_1fr_min-content] md:[grid-template-areas:'logo_content''sidebar_content''footer_content']"
>
  <Logo href="/" class="p-page sticky top-0" />

  <Sidebar class="px-page py-6">
    <ul
      class="font-mono font-thin flex flex-col gap-2 group-hover/sidebar:opacity-100 opacity-60 transition-opacity text-sm animate-in"
    >
      <li class="flex gap-2 items-center">
        <CameraIcon class="shrink-0" width="1em" height="1em" />{photo.camera}
      </li>
      <li class="flex gap-2 items-center">
        <ApertureIcon class="shrink-0" width="1em" height="1em" />{photo.lens}
        <span class="opacity-60" title="35mm equivalent"
          >{photo.focalLengthIn35mmFormat}mm</span
        >
      </li>
      <li class="flex">
        <MetricsIcon width="1em" height="1em" class="mt-[3px] shrink-0" />
        <div class="flex items-center flex-wrap">
          <div class="relative flex before:w-[8px]">
            {photo.aperture ? `ƒ/${photo.aperture}` : "–"}
          </div>
          <div
            class="relative flex before:w-[16px] before:text-center before:content-['·']"
          >
            {photo.shutterSpeed}
          </div>
          <div
            class="relative flex before:w-[16px] before:text-center before:content-['·']"
          >
            ISO {photo.iso}
          </div>
          {
            photo.exposureCompensation !== "0" ? (
              <div class="relative flex before:w-[16px] before:text-center before:content-['·']">
                ev{photo.exposureCompensation}
              </div>
            ) : null
          }
        </div>
      </li>
      <li class="flex gap-2 items-center">
        <DateIcon class="shrink-0" width="1em" height="1em" />{
          new Intl.DateTimeFormat("en-US", {
            dateStyle: "medium",
            timeStyle: "short",
          }).format(new Date(photo.takenAt))
        }
      </li>
      <li class="flex gap-2 items-center">
        <LocationIcon class="shrink-0" width="1em" height="1em" />
        {photo.location || "–"}
      </li>
    </ul>
  </Sidebar>

  <section
    style="grid-area: content;"
    class="md:h-screen flex items-center justify-center"
  >
    <Photo
      photo={photo}
      id={photo.id}
      class="h-auto md:h-full object-contain"
      loading="eager"
    />
  </section>

  <footer style="grid-area: footer" class="text-sm flex items-center p-page">
    <span class="text-muted">just photos from&nbsp;</span>
    <a href={`/from/${username}`} class="hover:underline" tabindex="-1"
      >{username}</a
    >
  </footer>
  <on-escape data-username={username}></on-escape>
</Layout>

<script is:inline define:vars={{ now }}>
  console.log(now);
</script>

<script>
  import { navigate } from "astro:transitions/client";
  class OnEscape extends HTMLElement {
    _onKeyDown: any;

    onKeyDown(evt) {
      if (evt.key === "Escape") {
        if (
          URL.canParse(document.referrer) &&
          new URL(document.referrer).origin === window.location.origin
        ) {
          history.back();
        } else {
          navigate(`/from/${this.dataset.username}`);
        }
      }
    }
    connectedCallback() {
      this._onKeyDown = this.onKeyDown.bind(this);
      window.addEventListener("keydown", this._onKeyDown);
    }

    disconnectedCallback() {
      window.removeEventListener("keydown", this._onKeyDown);
    }
  }
  customElements.define("on-escape", OnEscape);
</script>
